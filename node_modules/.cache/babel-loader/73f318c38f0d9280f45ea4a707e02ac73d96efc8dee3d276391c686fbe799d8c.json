{"ast":null,"code":"export default {\n  data() {\n    return {\n      form: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      errors: {\n        name: null,\n        email: null,\n        message: null\n      }\n    };\n  },\n  methods: {\n    validateForm() {\n      this.errors.name = this.form.name ? null : 'Name is required';\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.errors.email = emailPattern.test(this.form.email) ? null : 'Valid email is required';\n      this.errors.message = this.form.message ? null : 'Message is required';\n      return !this.errors.name && !this.errors.email && !this.errors.message;\n    },\n    submitForm() {\n      if (this.validateForm()) {\n        alert('Form submitted successfully!');\n        // Reset form\n        this.form.name = '';\n        this.form.email = '';\n        this.form.message = '';\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","form","name","email","message","errors","methods","validateForm","emailPattern","test","submitForm","alert"],"sources":["/Users/daniel/Web/VUE/Desafio vue router/src/views/ContactView.vue"],"sourcesContent":["<template>\n  <div class=\"pt-5 mt-5 contact-form\">\n    <h2>Contacto</h2>\n    <form @submit.prevent=\"submitForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">Nombre:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          v-model=\"form.name\"\n          required\n          :class=\"{ 'is-invalid': errors.name }\"\n        />\n        <span v-if=\"errors.name\" class=\"error-message\">{{ errors.name }}</span>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"email\">Email:</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          v-model=\"form.email\"\n          required\n          :class=\"{ 'is-invalid': errors.email }\"\n        />\n        <span v-if=\"errors.email\" class=\"error-message\">{{ errors.email }}</span>\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"message\">Mensaje:</label>\n        <textarea\n          id=\"message\"\n          v-model=\"form.message\"\n          required\n          :class=\"{ 'is-invalid': errors.message }\"\n        ></textarea>\n        <span v-if=\"errors.message\" class=\"error-message\">{{ errors.message }}</span>\n      </div>\n\n      <button type=\"submit\">Enviar</button>\n    </form>\n    <router-link v-if=\"showButton\" to=\"/\" class=\"back-to-home\">\n      Volver al Home\n    </router-link>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      form: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      errors: {\n        name: null,\n        email: null,\n        message: null\n      }\n    };\n  },\n  methods: {\n    validateForm() {\n      this.errors.name = this.form.name ? null : 'Name is required';\n      const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      this.errors.email = emailPattern.test(this.form.email) ? null : 'Valid email is required';\n      this.errors.message = this.form.message ? null : 'Message is required';\n      return !this.errors.name && !this.errors.email && !this.errors.message;\n    },\n    submitForm() {\n      if (this.validateForm()) {\n        alert('Form submitted successfully!');\n        // Reset form\n        this.form.name = '';\n        this.form.email = '';\n        this.form.message = '';\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.contact-form {\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\n.form-group {\n  margin-bottom: 15px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput,\ntextarea {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n}\n\ntextarea {\n  resize: vertical;\n  height: 100px;\n}\n\n.is-invalid {\n  border-color: red;\n}\n\n.error-message {\n  color: red;\n  font-size: 0.85rem;\n}\n\nbutton {\n  background-color: #007bff;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</style>\n\n"],"mappings":"AAgDA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE;QACJC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE;MACX,CAAC;MACDC,MAAM,EAAE;QACNH,IAAI,EAAE,IAAI;QACVC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;MACX;IACF,CAAC;EACH,CAAC;EACDE,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,IAAI,CAACF,MAAM,CAACH,IAAG,GAAI,IAAI,CAACD,IAAI,CAACC,IAAG,GAAI,IAAG,GAAI,kBAAkB;MAC7D,MAAMM,YAAW,GAAI,4BAA4B;MACjD,IAAI,CAACH,MAAM,CAACF,KAAI,GAAIK,YAAY,CAACC,IAAI,CAAC,IAAI,CAACR,IAAI,CAACE,KAAK,IAAI,IAAG,GAAI,yBAAyB;MACzF,IAAI,CAACE,MAAM,CAACD,OAAM,GAAI,IAAI,CAACH,IAAI,CAACG,OAAM,GAAI,IAAG,GAAI,qBAAqB;MACtE,OAAO,CAAC,IAAI,CAACC,MAAM,CAACH,IAAG,IAAK,CAAC,IAAI,CAACG,MAAM,CAACF,KAAI,IAAK,CAAC,IAAI,CAACE,MAAM,CAACD,OAAO;IACxE,CAAC;IACDM,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACH,YAAY,CAAC,CAAC,EAAE;QACvBI,KAAK,CAAC,8BAA8B,CAAC;QACrC;QACA,IAAI,CAACV,IAAI,CAACC,IAAG,GAAI,EAAE;QACnB,IAAI,CAACD,IAAI,CAACE,KAAI,GAAI,EAAE;QACpB,IAAI,CAACF,IAAI,CAACG,OAAM,GAAI,EAAE;MACxB;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}